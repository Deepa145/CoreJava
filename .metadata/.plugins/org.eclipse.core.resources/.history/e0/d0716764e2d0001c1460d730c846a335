package com.chainsys.reflections;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Scanner;
//import java.lang.reflect.Parameter;
public class ListClassMembers {
	
public static void main(String args[])
{
	lateBinding();
}
public static void earlyBinding()
{
Actor actorReference=new Actor();
actorReference.Name="SK";
actorReference.city="Chennai";
actorReference.printCity();
actorReference.printName();
}
public static void lateBinding() {
	java.util.Scanner sc = new Scanner(System.in);
	try {			
		System.out.println("Enter Class Name");
		String className = sc.nextLine();
		// load the class -- A a1;
		Class<?> classReference = Class.forName(className);
		// create Object a1=new A();
		Object obj = classReference.getDeclaredConstructor().newInstance();			
		System.out.println("Class Name " + obj.getClass().getName());
		System.out.println("Hash Code " + obj.hashCode());
	}
catch (Exception e) {
		System.out.println("Exception: " + e);
	}
	finally
	{
		sc.close();
	}
}
public static void printClass()
{
	 String classname="com.chainsys.reflections.Actor";
	 Class<?> actorclass = null;
	 try {
		actorclass=Class.forName(classname); // Actor actorclass=null;
	 } catch (ClassNotFoundException e1) 
	 {
		e1.printStackTrace();
	 } 
	 Object obj = null;
	 try {
		//obj=actorclass.newInstance(); // new Actor();
			obj = actorclass.getDeclaredConstructors()[0].newInstance();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} 
catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
	 printClassInfo(obj);
}
public static void printClassInfo(Object ob)
{
	  Class<?> classreflected= ob.getClass();
	 System.out.println(classreflected.getName());
	 System.out.println("Constructors:");
   Constructor<?> constructorlist[] = classreflected.getConstructors();// Generics
   for(int i = 0; i < constructorlist.length; i++)
   {
     System.out.println("\t" + constructorlist[i]);
   }
   //
   System.out.println("Methods:");
   Method methodlist[] = classreflected.getMethods();
  
for(int i = 0; i < methodlist.length; i++)
   {
 	  methodlist[i].setAccessible(true);
     System.out.println("\t Method Name: " + methodlist[i].getName()+
     		" ParameterCount "+ methodlist[i].getParameterCount()+
     		" returnType "+ methodlist[i].getReturnType());
   }
}
public static void testA()
{
String s1="Hello";
printClassInfo(s1);
Integer x=2000;
printClassInfo(x);
Emp firstEmp=new Emp();
printClassInfo(firstEmp);
Actor hero=new Actor();
printClassInfo(hero);
}
}